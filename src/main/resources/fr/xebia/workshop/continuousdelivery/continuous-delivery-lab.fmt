#summary Continuous Delivery with Jenkins and rundeck Lab for team '${infrastructure.identifier}'

*<font size="5">Continuous Delivery with Jenkins and rundeck Lab for Team '${infrastructure.identifier}'</font>*

<wiki:toc max_depth="1" />

= Your architecture =

<img width="400" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/per-team-infrastructure.png" />

<table>
<tr><td> *SSH Private key* </td><td> [https://s3-eu-west-1.amazonaws.com/continuous-delivery/continuous-delivery-workshop.pem continuous-delivery-workshop.pem]</td></tr>
<tr><td> *!GitHub project repository url* </td><td> [${infrastructure.githubRepositoryHomePageUrl}] </td></tr>
<tr><td> *Jenkins URL* </td><td> [${infrastructure.jenkinsUrl}] </td></tr>
<tr><td> *Rundeck URL* </td><td> [${infrastructure.rundeckUrl}] </td></tr>
<tr><td> *Deployit URL* </td><td> [${infrastructure.deployitUrl}] </td></tr>
<tr><td> *Nexus URL* </td><td> [${infrastructure.nexusUrl}] </td></tr>
<tr><td> *Tomcat Dev URL* </td><td> [${infrastructure.devTomcatUrl}] </td></tr>
<tr><td> *Tomcat Dev SSH* </td><td> 
{{{
ssh -i ~/.aws/continuous-delivery-workshop.pem tomcat@${infrastructure.devTomcat.publicDnsName}
}}}
 </td></tr>
<tr><td> *Tomcat Valid 1 URL* </td><td> [${infrastructure.validTomcat1Url}] </td></tr>
<tr><td> *Tomcat Valid 1 SSH* </td><td> 
{{{
ssh -i ~/.aws/continuous-delivery-workshop.pem tomcat@${infrastructure.validTomcat1.publicDnsName}
}}}
 </td></tr>
<tr><td> *Tomcat Valid 2 URL* </td><td> [${infrastructure.validTomcat2Url}] </td></tr>
<tr><td> *Tomcat Valid 2 SSH* </td><td> 
{{{
ssh -i ~/.aws/continuous-delivery-workshop.pem tomcat@${infrastructure.validTomcat2.publicDnsName}
}}}
 </td></tr>
</table>

----

= Environment setup =

 # Get the SSH private key [https://s3-eu-west-1.amazonaws.com/continuous-delivery/continuous-delivery-workshop.pem continuous-delivery-workshop.pem] to connect to the servers
 {{{
mkdir ~/.aws/
curl https://s3-eu-west-1.amazonaws.com/continuous-delivery/continuous-delivery-workshop.pem --output ~/.aws/continuous-delivery-workshop.pem
chmod 400 ~/.aws/continuous-delivery-workshop.pem
}}}
 # Clone Github repository ${infrastructure.githubRepositoryName}
  {{{
mkdir ~/continuous-delivery-workshop
cd ~/continuous-delivery-workshop
git clone ${infrastructure.githubRepositoryCloneUrl}
}}}
  Note: password of the "${infrastructure.gitHubAccountUsername}" user will be sent before the workshop.
 # build project
 {{{
cd ~/continuous-delivery-workshop/${infrastructure.githubRepositoryName}
mvn package
}}}
 # Modify the welcome page and push the change
  ## Modify {{{~/continuous-delivery-workshop/${infrastructure.githubRepositoryName}/src/main/webapp/WEB-INF/jsp/welcome.jsp}}}
  ## Push the change
   {{{
${infrastructure.githubRepositoryName} > git commit -m "test" src/main/webapp/WEB-INF/jsp/welcome.jsp
${infrastructure.githubRepositoryName} > git push
}}}
 # Verify that Jenkins detects the Git change and triggers a build : [${infrastructure.jenkinsUrl}/job/${infrastructure.githubRepositoryName}/]
 # Do a release of the application
  ## Add the Nexus credentials to your Maven settings.xml file :
   {{{
<settings>
  <servers>
    <!-- Xebia Workshop -->
    <server>
      <id>xebia-tech-event-nexus-releases</id>
      <username>deployment</username>
      <password>deployment123</password>
    </server>
    <server>
      <id>xebia-tech-event-nexus-snapshots</id>
      <username>deployment</username>
      <password>deployment123</password>
    </server>
  </servers>
</settings>
}}}
  ## Execute {{{mvn release:prepare release:perform}}}
 # Verify that the new release is available in Nexus : [${infrastructure.nexusUrl}content/groups/public/fr/xebia/demo/petclinic-${infrastructure.identifier}/xebia-petclinic/]
----

= Lab : Tomcat Maven Plugin =

== Architecture ==

<img width="400" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/tomcat-maven-plugin.png"/>

== Lab ==
*Goal:* Run the current version of the application on the laptop of the team, then deploy it on the Tomcat Development instance
=== Run the application in developement mode ===
 * Run Tomcat on the application
  ## Go to your application folder : 
{{{
cd ~/continuous-delivery-workshop/${infrastructure.githubRepositoryName} 
}}}
  ## Modify one more time the welcome.jsp. It's not needed to commit or push the modification on git.
{{{
~/continuous-delivery-workshop/${infrastructure.githubRepositoryName}/src/main/webapp/WEB-INF/jsp/welcome.jsp
}}}
  ## Launch the application thanks to the Tomcat6 Maven Plugin. 
{{{
   mvn tomcat6:run
}}}
  ## Connect to the application and check your modification
{{{
http://localhost:8080
}}}

=== Deploy the application to the remote Dev Instance of Tomcat ===
 * Deploy the application on the dev instance of Tomcat
  ## As previously, go to the root directory of the project
{{{
~/continuous-delivery-workshop/${infrastructure.githubRepositoryName}/src/main/webapp/WEB-INF/jsp/welcome.jsp
}}}   

  ## Deploy the application to Tomcat Dev server. The Maven goal is *tomcat6:deploy*, the parameters needed for this Maven plugin are:
 * *tomcat.password*: a Tomcat user granted to use Tomcat Manager
 * *tomcat.username*: password of the user
 * *maven.tomcat.url*: URL to the Tomcat Manager where the application will be deployed

*Note*: as you can see in the {{{~/continuous-delivery-workshop/${infrastructure.githubRepositoryName}/pom.xml}}}, the Tomcat6 Maven Plugin is configured with the parameter *update* that allows the application to be update if it's already deployed on the server.  
For further information, please go to [http://tomcat.apache.org/maven-plugin-2.0-SNAPSHOT/tomcat6-maven-plugin/deploy-mojo.html] 
  
 * Answer : 
 {{{
 mvn tomcat6:deploy -Dtomcat.password=admin -Dtomcat.username=admin -Dmaven.tomcat.url=${infrastructure.devTomcatUrl}manager
 }}}

  ## Connect to the application and check your modification
{{{
${infrastructure.devTomcatUrl}xebia-petclinic
}}}
----

= Lab: 'Local' Scripted Tomcat Deployment =

*Goal:* Develop a script to deploy a new version of '{{{xebia-petclinic.war}}}' on a tomcat server.

== Script Specifications ==
This script must:
 # Be installed under {{{$TOMCAT_HOME/bin/tomcat-deploy-petclinic}}} (use a [http://en.wikipedia.org/wiki/Shebang_(Unix) Unix Shebang] instead of suffixing your script by ".sh", ".py", etc)
 # Stop the Tomcat server if it is running
 # Delete existing {{{$TOMCAT_HOME/webapps/xebia-petclinic.war}}} file if exists,
 # Delete existing {{{$TOMCAT_HOME/webapps/xebia-petclinic}}} folder if exists,
 # Download latest version of {{{xebia-petclinic.war}}} (groupId=${infrastructure.projectMavenGroupId}, artifactId=${infrastructure.projectMavenArtifactId}) and copy it to {{{$TOMCAT_HOME/webapps/}}}
  ** {{{xebia-petclinic.war}}} is deployed on [${infrastructure.nexusUrl}content/groups/public/] but it is more elegant to use Nexus REST API (see below)
 # Start Tomcat server
 # Go further in the lab: test that the URL http://localhost:8080/xebia-petclinic/ returns "200 OK"
 
Answer : [http://xebia-france.googlecode.com/svn/cloudcomputing/xebia-cloudcomputing-extras/trunk/src/main/scripts/fr/xebia/workshop/continuousdelivery/tomcat-deploy-petclinic tomcat-deploy-petclinic]

== Tomcat scripting tips and tricks ==

=== Unix shebang ===

 * shell shebang (equivalent to ".sh"):
  {{{
#!/usr/bin/env sh
}}}
 * python shebang (equivalent to ".py"):
  {{{
#!/usr/bin/env python -c
}}}

=== What is {{{$TOMCAT_HOME}}} for this workshop installation === 

{{{
$TOMCAT_HOME=/opt/tomcat/apache-tomcat-6/
}}}

=== How to stop and start Tomcat 6  ===

<table>
<tr><td> *Start* </td><td>
{{{
$tomcat> /opt/tomcat/apache-tomcat-6/bin/catalina.sh start
}}}
</td></tr>
<tr><td> *Stop* </td><td>
{{{
$tomcat> /opt/tomcat/apache-tomcat-6/bin/catalina.sh stop
}}}
</td></tr>
</table>

=== Nexus REST API ===

 * Nexus REST API [https://repository.sonatype.org/nexus-core-documentation-plugin/core/docs/rest.artifact.maven.content.html /artifact/maven/content]:
  ** Pseudo code:
   {{{
http://nexus.xebia-tech-event.info:8081/nexus/service/local/artifact/maven/content?
   g=$GROUP_ID&
   a=$ARTIFACT_ID&
   r=$REPOSITORY&
   v=$VERSION&
   e=war
}}}
  ** g: Group id of the artifact (Required).
  ** a: Artifact id of the artifact (Required).
  ** v: Version of the artifact (Required) Supports resolving of "LATEST", "RELEASE" and snapshot versions ("1.0-SNAPSHOT") too.
  ** r: Repository that the artifact is contained in (Required).	E.g.: "{{{releases}}}" or "{{{snapshots}}}".
  ** p: Packaging type of the artifact (Optional).
  ** c: Classifier of the artifact (Optional).	
  ** e: Extension of the artifact (Optional).
 * To go further in the lab, Nexus REST API [https://repository.sonatype.org/nexus-core-documentation-plugin/core/docs/rest.artifact.maven.resolve.html /artifact/maven/resolve]
 
=== How to specify the name of the downloaded artifact with curl and wget ===

{{{
curl http://example.com/test.txt --output /tmp/renamed-test.txt
wget http://example.com/test.txt --output-document /tmp/renamed-test.txt
}}}

=== How to test existence of a file, of a folder ===
{{{
if [ -f /tmp/test.txt ];
then
   echo "File '/tmp/test.txt' exists"
fi
if [ -d /tmp/test-folder ];
then
   echo "Folder '/tmp/test-folder' exists"
fi
}}}

=== How to verify a http response code  ===

{{{
HEALT_CHECK_URL="http://www.iana.org/domains/example/"
HEALTH_CHECK_HTTP_CODE=$(curl --connect-timeout 10 --retry 10 --silent --show-error -w "%{http_code}" -o /dev/null http://www.iana.org/domains/example/) 
if [ $HEALTH_CHECK_HTTP_CODE -eq 200 ];
then
   echo "Health check url $HEALT_CHECK_URL returned expected http code '$HEALTH_CHECK_HTTP_CODE'"
else
   echo "FAILURE: '$HEALT_CHECK_URL' is KO (returned '$HEALTH_CHECK_HTTP_CODE')"
fi
}}}

=== SCP connection parameters to Tomcat servers ===

SCP command lines to copy a local "{{{tomcat-deploy-petclinic}}} to the remote tomcat servers.
<table>
<tr><td> *Tomcat Dev SSH* </td><td> 
{{{
scp -i ~/.aws/continuous-delivery-workshop.pem tomcat-deploy-petclinic tomcat@${infrastructure.devTomcat.publicDnsName}:/opt/tomcat/apache-tomcat-6/bin/
}}}
 </td></tr>
<tr><td> *Tomcat Valid 1 SSH* </td><td> 
{{{
scp -i ~/.aws/continuous-delivery-workshop.pem tomcat-deploy-petclinic tomcat@${infrastructure.validTomcat1.publicDnsName}:/opt/tomcat/apache-tomcat-6/bin/
}}}
 </td></tr>
<tr><td> *Tomcat Valid 2 SSH* </td><td> 
{{{
scp -i ~/.aws/continuous-delivery-workshop.pem tomcat-deploy-petclinic tomcat@${infrastructure.validTomcat2.publicDnsName}:/opt/tomcat/apache-tomcat-6/bin/
}}}
</td></tr>
<table>

----

= Lab. Automated Tomcat Deployment with Jenkins SSH Plugin = 

*Goal:* Deploy a new version of '{{{xebia-petclinic.war}}}' on the "Tomcat Dev server" at the end of your build with the "Jenkins SSH Plugin".

== Architecture ==

<img width="400" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-ssh-plugin.png"/>

== Lab ==

Note: the [https://wiki.jenkins-ci.org/display/JENKINS/SSH+plugin Jenkins SSH Plugin] is already installed on your jenkins server.
 # Deploy the "[http://xebia-france.googlecode.com/svn/cloudcomputing/xebia-cloudcomputing-extras/trunk/src/main/scripts/fr/xebia/workshop/continuousdelivery/tomcat-deploy-petclinic tomcat-deploy-petclinic]" shell script on the Tomcat Dev server.
 # Connect to your *Jenkins* server: [${infrastructure.jenkinsUrl}]
 # In the *Manage Jenkins* / *Configure System*
  <img height="20" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-manage-jenkins-screenshot.png" /> <img height="25" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-configure-system-screenshot.png" /> 
 # In the section called : *SSH Remote hosts*, declare your "Tomcat Dev" server:
  ** Host: {{{${infrastructure.devTomcat.publicDnsName}}}}
  ** Port: #blank#
  ** Username: {{{tomcat}}}
  ** Password: #blank#
  ** Keyfile: {{{/var/lib/jenkins/.ssh/continuous-delivery-workshop.pem}}}
   <img height="135" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-add-ssh-remote-host-screenshot.png" />
 # *Save* the settings
 # Create a new Jenkins *Free Style Project* named "{{{deploy-petclinic-on-tomcat-dev}}}" with the following parameters:
   <img height="75" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-create-free-style-project.png" />
 # Activate option called *Execute shell script on remote host using SSH*
 # Select the right SSH site "{{{${infrastructure.devTomcat.publicDnsName}}}}"
 # In *post-build script*, enter 
  {{{
  /opt/tomcat/apache-tomcat-6/bin/tomcat-deploy-petclinic ${infrastructure.projectMavenGroupId}
}}}
   <img height="80" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-configure-job-ssh-post-build-script-screenshot.png" />
   Note: the provided _answer_ [http://xebia-france.googlecode.com/svn/cloudcomputing/xebia-cloudcomputing-extras/trunk/src/main/scripts/fr/xebia/workshop/continuousdelivery/tomcat-deploy-petclinic tomcat-deploy-petclinic] needs the maven group id as input parameter ; you may have hardcoded the project maven group id "${infrastructure.projectMavenGroupId}" in the script you developped.

----

= Lab. Automated Tomcat Deployment with Rundeck = 

== Architecture ==

<img width="400" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-rundeck.png"/>

== Lab ==

=== Deploy Petclinic from Rundeck ===
Here is the configuration of the previous task with Rundeck.
 # Deploy the "[http://xebia-france.googlecode.com/svn/cloudcomputing/xebia-cloudcomputing-extras/trunk/src/main/scripts/fr/xebia/workshop/continuousdelivery/tomcat-deploy-petclinic tomcat-deploy-petclinic]" shell script on your "Tomcat Valid 1" and "Tomcat Valid 2" servers
 # Connect to your Rundeck server ${infrastructure.rundeckUrl} (login=admin, password=admin)
 # Create a new Rundeck project "{{{deploy-petclinic-on-tomcat-valid}}}"
  <img height=90" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/rundeck-create-project-screenshot.png" />
 # Connect via SSH to the rundeck server: 
  {{{
ssh -i ~/.aws/continuous-delivery-workshop.pem ec2-user@${infrastructure.rundeck.publicDnsName}
}}}
  # Update the project configuration files in folder "{{{/var/rundeck/projects/deploy-petclinic-on-tomcat-valid/etc/}}}":
  # Modify the *{{{project.properties}}}* to declare the ssh private key of the workshop
   {{{
project.ssh-keypath=/var/rundeck/.ssh/continuous-delivery-workshop.pem
}}}
  # Add your Valid Tomcat servers in *{{{resources.xml}}}*:
    <code language="xml"><node 
	name="valid-tomcat-1" 
	description="valid-tomcat-1" 
	tags="tomcat,valid" 
	hostname="${infrastructure.validTomcat1.publicDnsName}" 	
	osArch="i386" 
	osFamily="unix" 
	osName="Linux" 
	osVersion="" 
	username="tomcat" 
	privateIpAddress="${infrastructure.validTomcat1.privateIpAddress}" 	
	privateDnsName="${infrastructure.validTomcat1.privateDnsName}"
	editUrl="https://console.aws.amazon.com/ec2/home?region=eu-west-1"/>
<node 
	name="valid-tomcat-2" 
	description="valid-tomcat-2" 
	tags="tomcat,valid" 
	hostname="${infrastructure.validTomcat2.publicDnsName}" 	
	osArch="i386" 
	osFamily="unix" 
	osName="Linux" 
	osVersion="" 
	username="tomcat" 
	privateIpAddress="${infrastructure.validTomcat2.privateIpAddress}" 	
	privateDnsName="${infrastructure.validTomcat2.privateDnsName}"
	editUrl="https://console.aws.amazon.com/ec2/home?region=eu-west-1"/>
</code>
 # Go back to [${infrastructure.rundeckUrl} Rundeck web admin console], and let's have a look at all your nodes (servers) :
 # Click on the filter ("Name: localhost   Project: deploy-petclinic-on-tomcat-valid") and in the "name" filter, replace "localhost" with "{{{.*}}}" and click on "Filter". You should now see all 3 servers : the 2 tomcat servers, and the local rundeck server.
 # You can test that everything works by executing a command on all 3 servers : type "whoami" in the command field, and click "Run"...
 # Now, we will create our first job : click on the "Jobs" tab on the top of the page, and then on "New job ..." (on the right)
  <img height="100" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/rundeck-new-job-screenshot.png" />
 # Create a new job:
  * Save this Job?: {{{Yes}}}
  * Name: {{{tomcat-deploy-petclinic}}}
  * Options:
   ** Name: {{{version}}}
   ** Default value: {{{LATEST}}}
   ** Remote URL:
     {{{
  http://nexus.xebia-tech-event.info:8081/nexus/service/local/rundeck/options/version?g=${infrastructure.projectMavenGroupId}&a=xebia-petclinic&includeLatest=true
}}}
   ** Restrictions: {{{Enforced from Allowed Values}}}
   ** Click on the "save" button to save this option
  * Shell command: 
     {{{
  /opt/tomcat/apache-tomcat-6/bin/tomcat-deploy-petclinic fr.xebia.demo.petclinic-${infrastructure.identifier} ${r"${option.version}"}
}}}
   ** Click on the "save" button to save this command
  * Dispatch to Node: {{{checked}}}
  * Includes: {{{tags}}}, type "{{{tomcat}}}", and check that the "matched nodes" are valid-tomcat-1 and valid-tomcat-2...
  * Click on *Create and Run*
   <img height="350" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/rundeck-new-job-details-screenshot.png" />
  * While the script is running, follow the output
  * At the end, check your apps on both tomcat servers : [${infrastructure.validTomcat1Url}/xebia-petclinic/] and [${infrastructure.validTomcat2Url}/xebia-petclinic/]

=== Nexus integration (multiple versions) ===

When you execute a job in Rundeck, you can choose the version of the WAR to deploy. The list of available versions comes from Nexus.
If you have only 1 version in the list, it is the moment to do a release of the petclinic application : run {{{mvn release:prepare release:perform}}} and re-execute the Rundeck job : you can now choose the version to deploy !
 
=== Invoke Rundeck job from Jenkins ===

We will now link Jenkins and Rundeck, so that each successfull build is followed by a deployment on the valid servers :

 * Go to the Jenkins configuration page [${infrastructure.jenkinsUrl}/configure], and configure the Rundeck connection parameters (in the bottom of the page) :
  ** URL: {{{http://${infrastructure.rundeck.publicDnsName}:4440/}}}
  ** Login: {{{admin}}}
  ** Password: {{{admin}}}
  ** Click on "Test connection", you should get a success message
  ** Save
  <img height="75" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-rundeck-connection-screenshot.png" />

 * Edit your Jenkins job at [${infrastructure.jenkinsUrl}/job/${infrastructure.githubRepositoryName}/configuration], and configure the Rundeck plugin (in the bottom of the page) with the following parameters :
  ** Rundeck job identifier: {{{deploy-petclinic-on-tomcat-valid:tomcat-deploy-petclinic}}}
  ** Job options (optional): {{{version = LATEST}}}
  ** Wait for Rundeck job to finish ?: {{{checked}}}
  ** Should fail the build ?: {{{checked}}}
  <img height="140" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/jenkins-job-rundeck-configuration-screenshot.png" />
 * Save, trigger the build and verify it works

You can now test your deployment chain by editing a file in the petclinic project, and committing/pushing it to github : Jenkins will pick up the change, build the WAR, deploy it to Nexus, and ask Rundeck to deploy the project on the tomcat valid servers.

You can also do "on-demand" deploys : in the Jenkins job configuration page at [${infrastructure.jenkinsUrl}/job/${infrastructure.githubRepositoryName}/configuration], in the Rundeck plugin parameters, type "#deploy" in the "tag" field. Save and trigger a build : it won't be deploy on rundeck. But if you commit a file with a commit message containing "#deploy", it will be deployed. 

----

= Lab. Automated Tomcat Deployment with Deployit  =

== Lab ==

=== Deploy Petclinic from Deployit ===

==== Create the target environment Valid ====
 # Connect via SSH to the rundeck server:
  {{{
ssh -i continuous-delivery-workshop.pem ec2-user@${infrastructure.rundeck.publicDnsName}
sudo su - deployit
}}}
 # Create a file (*setup.py*) to define your target environment
    <code language="python">
host_valid_1 = repository.create("Infrastructure/host-valid-1",factory.configurationItem("Host", {'operatingSystemFamily':'UNIX', 'accessMethod':'SSH_SFTP', 'address':'${infrastructure.validTomcat1.privateDnsName}', 'username':'tomcat'}))
tomcat_valid_1 = repository.create(host_valid_1.id+"/tomcat6",factory.configurationItem("TomcatUnmanagedServer",{'host':host_valid_1, 'tomcatHome':'/opt/tomcat/apache-tomcat-6', 'baseUrl':'http://'+host_valid_1.values['address']+':8080', 'startCommand':'/opt/tomcat/apache-tomcat-6/bin/catalina.sh start', 'stopCommand':'/opt/tomcat/apache-tomcat-6/bin/catalina.sh stop'}))
deployit.print(repository.read(tomcat_valid_1.id))
host_valid_2 = repository.create("Infrastructure/host-valid-2",factory.configurationItem("Host", {'operatingSystemFamily':'UNIX', 'accessMethod':'SSH_SFTP', 'address':'${infrastructure.validTomcat2.privateDnsName}', 'username':'tomcat'}))
tomcat_valid_2 = repository.create(host_valid_2.id+"/tomcat6",factory.configurationItem("TomcatUnmanagedServer",{'host':host_valid_2, 'tomcatHome':'/opt/tomcat/apache-tomcat-6', 'baseUrl':'http://'+host_valid_2.values['address']+':8080', 'startCommand':'/opt/tomcat/apache-tomcat-6/bin/catalina.sh start', 'stopCommand':'/opt/tomcat/apache-tomcat-6/bin/catalina.sh stop'}))
deployit.print(repository.read(tomcat_valid_2.id))
env = repository.create("Environments/Continuous-Valid", factory.configurationItem("Environment", {"members":[host_valid_1.id,tomcat_valid_1.id,host_valid_2.id,tomcat_valid_2.id]}))
deployit.print(repository.read(env.id))
    </code>
 # Execute the CLI script
  {{{
deployit-cli/bin/cli.sh -username admin -password admin -f ~/setup.py
  }}}
 # Connect to your Deployit server ${infrastructure.deployitUrl} (login=admin, password=admin)
 # Verify your environment has been created.
 <img height=90" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/deployit-check-env-screenshot.png" />

==== Configure Jenkins ====
 # Connect on Jenkins and update the project
 <img height=90" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/deployit-update-project-screenshot.png" />
 # Update the deployit-settings.xml file by replacing the password 'XXXXXX' with the correct value.
 {{{
vi deployit-settings.xml
git ci -a -m "set the right password"
git push
 }}}
 The last line will trigger a new build by Jenking and at then will deploy the application.
 # Connect to your Deployit server ${infrastructure.deployitUrl} (login=admin, password=admin)
 # Verify the application has been deployed
<img height=90" src="http://xebia-france.googlecode.com/svn/wiki/cont-delivery-img/deployit-check-deployment-ok.png" />

----
*END OF THE LAB THANK YOU!*

_${generator}_
